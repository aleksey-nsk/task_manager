<?php

namespace App\Http\Controllers;
// - контроллеры описываются в пространстве имён App\Http\Controllers 

use Illuminate\Http\Request;
// - тут предоставляется доступ к классу Request, который по-сути
// представляет собой абстракцию отправляемого пользователем запроса

use App\Http\Requests;
use App\Http\Controllers\Controller;

use App\Task;
// - раз хотим работать с конкретной моделью, то надо прописать 
// доступ к ней. Теперь можем обращаться к классу Task 

class TaskController extends Controller
{
    // Объявим protected-свойство данного класса: 
    protected $header;

    // Создадим конструктор для данного контроллера: 
    public function __construct()
    {
        $this->header = 'Task Manager';  
    }

    // Метод index обрабатывает запрос на отображение
    // главной странички проекта: 
    public function index()
    {
        // В переменную $tasks сохраним выборку 
        // необходимой информации из таблицы 'tasks': 
        // $tasks = Task::select(['id', 'name'])->get();
        
        // Будем извлекать данные в другом порядке. В итоге поменяем
        // последовательность задач на главной странице, теперь
        // самая новая задача будет наверху:
        $tasks = Task::select(['id', 'name'])->latest()->get();
        
        // dump($tasks); // распечатаем содержимое переменной $tasks

        // Передаём в вид переменные: 
        return view('tasks')->with([ 'header' => $this->header,
                                     'tasks'  => $tasks ]);
    }

    // Метод store() должен реализовать действие. То есть осуществить
    // сохранение новой задачи в таблице 'tasks': 
    public function store(Request $request)
    {
        // Переменная $request это объект
        // глобального класса Request.
        // Request это абстракция запроса, отправляемого пользователем.
        // Объект $request будет содержать данные, которые 
        // отправляются в запросе. А значит чтобы получить доступ к отправляемым 
        // данным, мы должны просто обратиться к объекту $request:
        // dump( $request->all() ); 

        // Валидация входных данных: 
        $this->validate($request, [
            'name' => 'required|max:100|unique:tasks,name'
        ]); 

        // Формируем временную переменную $data, в которую
        // сохраним абсолютно все поля, которые содержатся 
        // в объекте $request, т.е это все те данные которые
        // отправляются формой: 
        $data = $request->all();
        
        // Формируем переменную $task. Сейчас
        // $task это пустая модель: 
        $task = new Task;

        // Убедимся в том что 
        // $task это пустая модель: 
        // dump($task); 

        // Заполним данную модель $task
        // свойствами (массовое заполнение):  
        $task->fill($data); 

        // Теперь модель $task уже не пустая.
        // Убедимся в этом: 
        // dump($task); 

        // Сохраним данное состояние модели: 
        $task->save(); 
        // - сохранение модели по-сути осуществляет
        // сохранение информации в БД.
        
        // После сохранения инфы реализуем ответ,
        // и перенаправим юзера на главную страничку: 
        return redirect('/');  
    }   
}
